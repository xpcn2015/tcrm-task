
namespace TCRM.Task;

// Config

enum StreamSource: byte {
  Stdout = 0,
  Stderr = 1
}

table TaskConfig {
  command: string (required);
  args: [string];
  working_dir: string;
  env: [EnvEntry];
  timeout_ms: ulong;
  enable_stdin: bool = false;
  ready_indicator: string;
  ready_indicator_source: StreamSource = Stdout;
  use_process_group: bool = true;
}

table EnvEntry {
  key: string (required);
  value: string (required);
}

// State

enum TaskState: byte {
  Pending = 0,
  Initiating = 1,
  Running = 2,
  Ready = 3,
  Finished = 4,
  Invalid = 127
}

enum ProcessState: byte {
  Stopped = 0,
  Running = 1,
  Pause = 2,
  Invalid = 127
}

enum ProcessControlAction: byte {
  Stop = 0,
  Pause = 1,
  Resume = 2
}

// Error

enum TaskErrorType: byte {
  IO = 0,
  Handle = 1,
  Channel = 2,
  InvalidConfiguration = 3,
  Control = 4
}

table TaskError {
  kind: TaskErrorType;
  message: string (required);
}

// Event

enum TaskTerminateReason: byte {
  Timeout = 0,
  Cleanup = 1,
  DependenciesFinished = 2,
  UserRequested = 3,
  InternalError = 4
}

union TaskEventStopReason {
  Finished: DummyTable,
  TerminatedTimeout: DummyTable,
  TerminatedCleanup: DummyTable,
  TerminatedDependenciesFinished: DummyTable,
  TerminatedUserRequested: DummyTable,
  TerminatedInternalError: DummyTable,
  Error: ErrorStopReason
}

table DummyTable {}

table ErrorStopReason {
  message: string (required);
}

// SystemTime representation (nanoseconds since UNIX_EPOCH)
table SystemTime {
  nanos_since_epoch: ulong;
}

union TaskEventUnion {
  Started: StartedEvent,
  Output: OutputEvent,
  Ready: ReadyEvent,
  Stopped: StoppedEvent,
  Error: ErrorEvent,
  ProcessControl: ProcessControlEvent
}

table StartedEvent {
  process_id: uint;
  created_at: SystemTime;
  running_at: SystemTime;
}

table OutputEvent {
  line: string (required);
  src: StreamSource = Stdout;
}

table ReadyEvent {
}

table StoppedEvent {
  exit_code: int;
  reason: TaskEventStopReason (required);
  finished_at: SystemTime;
  signal: int; // Unix only - termination signal
}

table ErrorEvent {
  error: TaskError (required);
}

table ProcessControlEvent {
  action: ProcessControlAction;
}

table TaskEvent {
  event: TaskEventUnion (required);
}

root_type TaskEvent;